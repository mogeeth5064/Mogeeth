import pandas as pd
import numpy as np
import re
import nltk
import streamlit as st
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Download stopwords if not already downloaded
nltk.download('stopwords')
from nltk.corpus import stopwords
stop_words = set(stopwords.words('english'))

# ========== Step 1: Preprocessing ==========
def clean_text(text):
    text = text.lower()  # lowercase
    text = re.sub(r'\W', ' ', text)  # remove special characters
    text = re.sub(r'\s+', ' ', text)  # remove extra spaces
    words = text.split()
    words = [word for word in words if word not in stop_words]  # remove stopwords
    return ' '.join(words)

def preprocess_data(df):
    df = df.dropna(subset=['Storyline'])  # remove missing storylines
    df = df.drop_duplicates(subset='Movie Name', keep='first')  # remove duplicate movie names
    df['Cleaned_Storyline'] = df['Storyline'].apply(clean_text)  # clean text
    return df

def compute_similarity(df):
    tfidf = TfidfVectorizer()
    tfidf_matrix = tfidf.fit_transform(df['Cleaned_Storyline'])  # vectorize text
    return tfidf, tfidf_matrix

# ========== Step 2: Recommendation Function ==========
def recommend_movies(input_storyline, df, tfidf_vectorizer, tfidf_matrix):
    input_cleaned = clean_text(input_storyline)
    input_vec = tfidf_vectorizer.transform([input_cleaned])
    similarity_scores = cosine_similarity(input_vec, tfidf_matrix).flatten()
    top_indices = similarity_scores.argsort()[-5:][::-1]
    return df.iloc[top_indices][['Movie Name', 'Storyline']].reset_index(drop=True)

# ========== Step 3: Streamlit Interface ==========
def run_streamlit(df, tfidf_vectorizer, tfidf_matrix):
    st.set_page_config(page_title="IMDb Storyline Recommender", layout="centered")
    st.title("ðŸŽ¬ IMDb 2024 Movie Recommender")
    st.write("Enter a movie storyline and get top 5 recommended movies based on similar plots.")

    user_input = st.text_area("Enter a movie storyline:", height=200)

    if st.button("Recommend"):
        if not user_input.strip():
            st.warning("Please enter a storyline to get recommendations.")
        else:
            with st.spinner("Analyzing storylines..."):
                results = recommend_movies(user_input, df, tfidf_vectorizer, tfidf_matrix)
                st.success("Top 5 recommended movies:")
                for i, row in results.iterrows():
                    st.markdown(f"### {i+1}. {row['Movie Name']}")
                    st.write(row['Storyline'])

# ========== Step 4: Main ==========
if __name__ == "__main__":
    df = pd.read_csv(r"C:\Users\Mogeeth.M\Downloads\IMDB\env\imdb.csv")
    df = preprocess_data(df)
    tfidf_vectorizer, tfidf_matrix = compute_similarity(df)
    run_streamlit(df, tfidf_vectorizer, tfidf_matrix)
